"""Set up a new MSMBuilder project

"""
# Author: Matthew Harrigan <matthew.harrigan@outlook.com>
# Contributors:
# Copyright (c) 2016, Stanford University
# All rights reserved.

from __future__ import print_function, division, absolute_import

import os
import re
import stat
import textwrap
from datetime import datetime

import nbformat
from jinja2 import Environment, PackageLoader
from nbformat.v4 import new_code_cell, new_markdown_cell, new_notebook

from ..cmdline import Command, argument


def chmod_plus_x(fn):
    st = os.stat(fn)
    os.chmod(fn, st.st_mode | stat.S_IEXEC)


class SetUpProject(Command):
    _group = '0-Support'
    _concrete = True
    description = __doc__

    ipynb = argument('--ipynb', default=False, action='store_true',
                     help="Write IPython / Jupyter notebooks instead of "
                          "Python scripts")

    def __init__(self, args):
        # Functions by extension
        self.write_funcs = {
            'py': self.write_python,
            'sh': self.write_shell,
            '*': self.write_generic,
        }
        if args.ipynb:
            # TODO: modify plotting boilerplate
            # add matplotlib inline
            # remove xdg-open
            self.write_funcs['py'] = self.write_ipython

    def get_header(self):
        return "# msmbuilder autogenerated template version 1"

    def write_ipython(self, templ_fn, rendered):
        templ_ipynb_fn = templ_fn.replace('.py', '.ipynb')

        cell_texts = [templ_ipynb_fn] + re.split(r'## (.*)\n', rendered)
        cells = []
        for heading, content in zip(cell_texts[:-1:2], cell_texts[1::2]):
            cells += [new_markdown_cell("## " + heading.strip()),
                      new_code_cell(content.strip())]
        nb = new_notebook(cells=cells,
                          metadata={'kernelspec': {'name': 'python3',
                                                   'display_name': 'Python 3'}})
        with open(templ_ipynb_fn, 'w') as f:
            nbformat.write(nb, f)

    def write_python(self, templ_fn, rendered):
        with open(templ_fn, 'w') as f:
            f.write(rendered)

    def write_shell(self, templ_fn, rendered):
        with open(templ_fn, 'w') as f:
            f.write(rendered)
        chmod_plus_x(templ_fn)

    def write_generic(self, templ_fn, rendered):
        with open(templ_fn, 'w') as f:
            f.write(rendered)

    def start(self):
        env = Environment(loader=PackageLoader('msmbuilder',
                                               'project_templates'))
        for templ_fn in env.list_templates():
            ext = templ_fn.split('.')[-1]
            if ext not in self.write_funcs:
                ext = '*'
            template = env.get_template(templ_fn)
            rendered = template.render(
                header=self.get_header(),
                topology_fn='data/fs-peptide.pdb',
                timestep=10,
                date=datetime.now().isoformat(),
            )
            self.write_funcs[ext](templ_fn, rendered)

        print('\n'.join(textwrap.wrap(
            "Ok, I wrote out a bunch of Python files that can guide you "
            "through analyzing a system with MSMBuilder. I implore you to "
            "look at the scripts before you start blindly running them. "
            "You will likely have to change some (hyper-)parameters or "
            "filenames to match your particular project."
        )))
        print()
        print('\n'.join(textwrap.wrap(
            "More than that, however, it is important that you understand "
            "exactly what the scripts are doing. Each protein system is "
            "different, and it is up to you (the researcher) to hone in on "
            "interesting aspects. This very generic pipeline may not give "
            "you any new insight for anything but the simplest systems."
        )))
